#+TITLE: Emacs literate configuration
#+AUTHOR: Luke D. Inglis
#+DATE: 11/2023
#+STARTUP: show2levels indent hidestars
#+PROPERTY: header-args :tangle (let ((org-use-tag-inheritance t)) (if (member "INACTIVE" (org-get-tags))  "no" "~/code/dotemacs/lit-init.el")))

* Emacs Configuration
** Preface

While learning Emacs I've tried a lot of different prepackaged 'distros'. Most notably, as an erstwhile (neo)vim user, Doom. After learning enough via that route and additionally deciding to try to give vanilla Emacs a solid try I'm leaving the prepackaged distros behind and building my own configuration.

It won't be 100% from scratch (are they ever?) as I really like the approach of the NΛNO configuration project and have built from that. Over all I aim for a practically minimalist approach. 

Naturally my config is built 'on the shoulders of giants' where much more experienced Emacs users have gone before. With the goal of learning in mind I aim to do my best to not put anything in this config unless I understand how it works.


To wit, giants on whose shoulders I stand. In no particular order.

+ [[https://github.com/rememberYou/.emacs.d][Terencio Agozzino]] (=rememberYou=)
+ [[https://github.com/rougier/dotemacs][Nicolas Rougier (rougier) - Author of NANO]]
+ [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson (daviwil) - System Crafter]]

Big thanks to those from whom I have learned. (And copy and pasted from...)

** Ask rougier - The following is taken from his literate config. Mostly just seeing if I can get things to work.

This document is a literate configuration for GNU Emacs written in [[https://orgmode.org/][org]] format. It cannot be used directly and needs to be transformed to extract all the different code blocks into a single configuration file. This is done using the [[help:org-babel-tangle][org-babel-tangle]] function that "extract the bodies of all source code blocks from the current file into their own source-specific files". You can try by yourself by typing the sequence: =C-c C-v t= (org-babel-execute-subtree).

However, on my Emacs (28.1), there seems to be a bug that prevent a proper tangling. You'll thus need to go to the [[Configuration]] section and execute it using =C-c C-v s= to fix this bug before tangling the file.

Each subsection may be tagged with:

- =:BINDING:=  The section defines some key binding
- =:HOOK:=     The section installs some hook
- =:ADVICE:=   The section installs some advice
- =:FACE:=     The section modifies some face
- =:MODE:=     The section activates a mode
- =:DEFER:=    The content of the section is deferred (lazy load)
- =:PERSONAL:= The content is personal and should be adapted
- =:INACTIVE:= The content of the section won't be exported
- =:BUGFIX:=   The section contains (temporary) bug fix code
- =:OTHER:=    The section will be exported to a different file than default
- =:TIMER:=    The section install a timer
- =:OS:=       The section contains some system specific code

There is also a configuration mode defined in the section below to ease the writing.

When tangled, the process will create the file [[file:~/.emacs.d/init.el][~/code/dotemacs/lit-init.el]]  [[file:~/.emacs.d/early-init.el][~/code/dotemacs/early-init.el]] (from the [[Early init]] section). You can either copy these files to your ~emacs.d~ or you can use [[https://github.com/plexus/chemacs2][chemacs2]] and add ~.emacs.org~ as an alternative profile.

Note also that the first time you will start emacs using this configuration, *it will take a long time* because a lof of packages will be dowloaded, installed and possibly compiled (if you use Emacs 28 and above).

** To sort :INACTIVE:

#+begin_src emacs-lisp

  (setq-default
   ad-redefinition-action 'accept         ; Silence warnings for redefinition
   custom-unlispify-menu-entries nil      ; Prefer kebab-case for titles
   custom-unlispify-tag-names nil         ; Prefer kebab-case for symbols
   (put 'downcase-region 'disabled nil)    ; Enable downcase-region
   (put 'upcase-region 'disabled nil)      ; Enable upcase-region
   native-comp-async-report-warnings-errors 'silent ; Skip compilation error buffers
   read-process-output-max (* 1024 1024)  ; Increase read size per process

#+end_src

** To do [0/1]                                                    :INACTIVE:

- [ ] Change underlying Coreutils on MacOS to be the GNU version and adjust config accordingly if necessary.

** Early init :HOOK:OTHER:
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/code/dotemacs/early-init.el
:END:

This code is meant to go to the [[file:early-init.el][early-init.el]] file.

#+begin_src emacs-lisp

  (setq
   site-run-file nil                         ; No site-wide run-time initializations.
   inhibit-default-init t                    ; No site-wide default library
   gc-cons-threshold most-positive-fixnum    ; Very large threshold for garbage
                                             ; collector during init
   package-enable-at-startup nil)            ; We'll use straight.el

  (setq native-comp-eln-load-path
        (list (expand-file-name "eln-cache" user-emacs-directory)))

  ;; Reset garbage collector limit after init process has ended (8Mo)
  (add-hook 'after-init-hook
            #'(lambda () (setq gc-cons-threshold (* 8 1024 1024))))

#+end_src

** Packages management :PERSONAL:

Using [[https://github.com/raxod502/straight.el][straight.el]] for package management and disable checking (for speedup). Hook it up to =use-package= by default at least for the time being.

#+begin_src emacs-lisp

  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  ;; Use straight.el for use-package expressions
  (setq straight-check-for-modifications nil)

#+end_src

  Library load paths with a special case for mu4e (you may need to adapt this path).

  #+begin_src emacs-lisp

    (add-to-list 'load-path
                 (expand-file-name "lisp" user-emacs-directory))

  #+end_src

** Packages installation

Packages used in this specific configuration. You may want to adapt this list. The first time this sequence will be executed, *it will take a long time*. Then, at next restart, it should be very fast (less than 1 second because it won't install anything basically).

#+begin_src emacs-lisp

  (setq package-list
        '(
          cape                 ; Completion At Point Extensions
          circadian            ; Change my theme in rhythm with nature
          coffee-mode          ; Sadly still have to deal with coffeescript sometimes
          consult              ; Consulting completing-read
          consult-lsp          ; LSP extras for consult to, well, consult
          corfu                ; Completion Overlay Region FUnction
          css-mode             ; If everything is !important than nothing is !important
          deft                 ; Enhanced note taking with Org
          exec-path-from-shell ; Get environment variables such as $PATH from the shell
          f                    ; Modern API for working with files and directories
          flycheck             ; Enhanced syntax checking suppposedly superior to flymake
          flycheck-eglot       ; Allow Flycheck to understand Eglot as a checker
          helpful              ; A better help buffer
          imenu-list           ; Show imenu entries in a separate
          lua-mode             ; Because it's a lovely little scripting/configuration language
          magit                ; A Git porcelain inside Emacs.
          marginalia           ; Enrich existing commands with completion annotations
          markdown-mode        ; Major mode for Markdown-formatted text
          multiple-cursors     ; Sometimes many cursors are better than one
          no-littering         ; Keep our things clean and tidy
          objed                ; Navigate and manipulate text objects
          orderless            ; Completion style for matching regexps in any order
          org-auto-tangle      ; Tangle org file when it is saved
          projectile           ; Project scoped stuffness
          rainbow-mode         ; Sometime you just need to see the colors
          rg                   ; Ripgrep for speed and profit(?)
          treesit-auto         ; Treesitter is native now but we can give it some help
          undo-fu              ; Work around Emacs' clunky undo interface
          undo-fu-session      ; Persistant undo across sessions
          use-package          ; A configuration macro for simplifying your .emacs
          vertico              ; VERTical Interactive COmpletion
          visual-fill-column   ; Nicer wrapping mostly for text modes
          vterm                ; A real terminal emulator running in Emacs
          web-mode             ; Uber mode for web templating languages
          which-key            ; Discovery method for key bindings
          yaml-mode            ; YAML mode
          ))

  ;; Install packages that are not yet installed
  (dolist (package package-list)
    (straight-use-package package))

  ;; Install a selection of the N Λ N O suite of packages install straight from GitHub

  ;; Modeline (eventually to be replace with my own)
  (straight-use-package
   '(nano-modeline :type git :host github :repo "rougier/nano-modeline"))

  ;; A cleaner, more minimal Org agenda
  (straight-use-package
   '(nano-agenda :type git :host github :repo "rougier/nano-agenda"))

  ;; An interesting looking approach to adding a sidebar to Emacs. I don't have a strong usecase for it yet but I like to the idea too much to not play around with.
  (straight-use-package
   '(nano-sidebar :type git :host github :repo "rougier/nano-sidebar"))

  (straight-use-package
    '(liminal-theme :type nil :local-repo "~/code/liminal-theme"))

  ;; Trying out setup.el in place of use-package for a more minimal, streamlined configuration
  (straight-use-package
   '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))

  #+end_src

** Core
*** Bugfix :BUGFIX:

*Temporary bugfix* for babel emacs-lisp that does not take into account prologue/epilogue.
See https://list.orgmode.org/CA+G3_PNrdhx0Ejzw8UO7DgZ+ju1B7Ar_eTch5MMViEpKGwqq3w@mail.gmail.com/T/
(November 2020)

#+name: org-babel-expand-body:emacs-lisp
#+begin_src emacs-lisp

  (defun my/org-babel-expand-body:emacs-lisp (orig-fun body params)
    "Expand BODY according to PARAMS and call original function with new body"

    (let* ((pro (or (cdr (assq :prologue params)) ""))
           (epi (or (cdr (assq :epilogue params)) ""))
           (body (concat pro body epi)))
      (apply orig-fun `(,body ,params))))

  (advice-add 'org-babel-expand-body:emacs-lisp
              :around
              #'my/org-babel-expand-body:emacs-lisp)

#+end_src

*** Auto-tangle

Automatically tangle org-mode files with the option #+auto_tangle: t

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-auto-tangle-mode)

#+end_src

*** Environmental Management

Use [[https://github.com/emacscollective/no-littering][no-littering]] to keep my config directory tidier. So far I don't see any need to tweaks its sensible defaults.

#+begin_src emacs-lisp

  (require 'no-littering)

#+end_src

Pull my full set of environmental variables into Emacs. This is most important on MacOS where I am currently spending all of my time.

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))

#+end_src

Juggle a few modifier keys to make things a little more comfortable. Tell dired not to use the underlying =ls= command on Mac since it doesn't use GNU Coreutils which is what dired expects.

#+begin_src emacs-lisp

  (when (string-equal system-type "darwin")
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    (setq dired-use-ls-dired nil))

#+end_src

*** Theme and general UI

- To do [0/2]
  - [ ] Extract the non-theme related settings from the =liminal-mode= settings
  - [ ] Switch to my own fork of the modeline

My version of the =nano-theme= package. Currently it's a straightforward fork with mostly just the colors changed and the nano naming replaced with my own liminal naming.

Visually a lot of what I'm going for is derived from the N Λ N O project and things found in its author personal config. I'm currently in the process of forking and customizing various aspects of it.

As part of it's setup it is running the =liminal-mode= function which sets a number of sensible defaults and settings. For me it would make more sense for these to be there own separate setup but I haven't extracted them yet.

#+begin_src emacs-lisp

  (require 'liminal-theme)
  (liminal-mode)

#+end_src

Bring in the N Λ N O modeline. I like the idea and the behavior of this modeline but there are a few more things that I would have present that are missing from it. I have forked it but haven't made any useful changes made.

#+begin_src emacs-lisp

  (setup nano-modeline
    (:option
     mode-line-format nil)
    (:with-mode prog-mode
      (:hook nano-modeline-prog-mode))
    (:with-mode text-mode
      (:hook nano-modeline-text-mode))
    (:with-mode messages-buffer-mode
      (:hook nano-modeline-message-mode))
    (:with-mode org-mode
      (:hook nano-modeline-org-mode))
    (:with-mode org-capture-mode
      (:hook nano-modeline-org-capture-mode))
    (:with-mode org-agenda-mode
      (:hook nano-modeline-org-agenda-mode)))

#+end_src

I prefer the legibility of a well designed light theme when the lighting is good. However, I don't want to burn my retinas at night. Thankfully =circadian= exists to automatically adjust my theme at sunrise/sunset in my local area.

#+begin_src emacs-lisp

  (setup circadian
    (:option
     calendar-latitude 42.4
     calendar-longitude -71.0
     circadian-themes '((:sunrise . liminal-light)
                        (:sunset  . liminal-dark)))
    (circadian-setup))

#+end_src

Marginalia adds rich annotations to the minibuffer completions. Good for quick reference and discoverability.

#+begin_src emacs-lisp

  (setup marginalia
    (:with-map minibuffer-local-map
      (:bind "M-A marginalia-cycle))
  (marginalia-mode))

#+end_src

Some tweaks to the minibuffer's appearance/behavior. Can't remember right now where I picked this up.

#+begin_src emacs-lisp

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

#+end_src

*** Behavioral Enhancements

One of the few big holes in Emacs' basic functionality is its undo system. So I use a drop in replacement.

#+begin_src emacs-lisp

  ;; Clean and straightforward undo/redo
  (setup undo-fu
    (:global
     "C-/" undo-fu-only-undo
     "C-M-/" undo-fu-only-redo))

  ;; Persist undo history across sessions
  (setup undo-fu-session
    (:option
     undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    (undo-fu-session-global-mode))

#+end_src
